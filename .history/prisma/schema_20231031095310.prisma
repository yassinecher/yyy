// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  CreatedAt DateTime @default(now())
  UpdateAt  DateTime @default(now())
  role      String   @default("user")
}



model Product {
  id            String       @id @default(uuid())
  categoryId    String
  name          String
  dicountPrice  Decimal      @default(0)
  description   String    @default("")
  price         Decimal
  stock         Decimal      @default(0)
  isFeatured    Boolean      @default(false)
  isArchived    Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  template      String       @default("")
  useTemplate   Boolean      @default(false)
  category      Category     @relation("CategoryToProduct", fields: [categoryId], references: [id])
  images        Image[]
  orderItems    OrderItem []
  motherboard   Motherboard[]       @relation("ProductToMotherboard")
  cpus          Processor[]       @relation("ProductToCPU")
  gpus          Gpu[]       @relation("ProductToGPU")
  memories      Memory[]    @relation("ProductToMemory")
  powersupplies Powersupply[] @relation("ProductToPowersupply")
  storages      Harddisk[]   @relation("ProductToStorage")
  cases         PCcase[]    @relation("ProductToPCCase")
}


model Billboard {
  id          String @id @default(uuid())
 
  label       String
  imageUrl    String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String      @id @default(uuid())
 
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

}

model Order {
  id         String      @id @default(uuid())
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}


model Motherboard {
  id             String             @id @default(uuid())
  products           Product[] @relation("ProductToMotherboard")
  manufacturerId String
  manufacturer   Manufacturer       @relation("ManufacturerToMotherboard", fields: [manufacturerId], references: [id])
  ramslotsId     String
  ramslots       RamSlots           @relation(fields: [ramslotsId], references: [id])
  chipsetId      String
  chipset        MotherboardChipset @relation(fields: [chipsetId], references: [id])
  cpusupportId   String
  cpusupport     CPUSupport         @relation(fields: [cpusupportId], references: [id])
  formatId       String
  format         MotherboardFormat  @relation(fields: [formatId], references: [id])
  
}
model RamSlots {
  id           String        @id @default(uuid())
  name         String
  number       Int
  type         String
  motherboards Motherboard[]
}
model MotherboardChipset {
  id           String        @id @default(uuid())
  name         String

  motherboards Motherboard[]
}
model CPUSupport {
  id           String        @id @default(uuid())
  name         String
  motherboards Motherboard[]
  processor Processor[]
}
model Guarantee {
  id           String        @id @default(uuid())
  name         String

}
model MotherboardFormat {
  id           String        @id @default(uuid())
  name         String
  motherboards Motherboard[]
}
model Manufacturer {
  id           String        @id @default(uuid())
  name         String
  imageUrl     String
  motherboards Motherboard[] @relation("ManufacturerToMotherboard")

}

model Processor {
  id                    String              @id @default(uuid())
  products           Product[] @relation("ProductToCPU")
  processorModelId      String
  processorModel        ProcessorModel      @relation(fields: [processorModelId], references: [id])
  
  cpusupportId   String
  cpusupport     CPUSupport         @relation(fields: [cpusupportId], references: [id])

}
model ProcessorModel {
  id           String      @id @default(uuid())
  name         String
  processor Processor[]
}


model Memory {
  id          String          @id @default(uuid())
  products           Product[] @relation("ProductToMemory")
  rgb         Boolean
  marqueId    String
  numberId    String
  typeId      String
  frequencyId String
  marque      MemoryMarque    @relation(fields: [marqueId], references: [id])
  number      MemoryNumber    @relation(fields: [numberId], references: [id])
  type        MemoryType      @relation(fields: [typeId], references: [id])
  frequency   MemoryFrequency @relation(fields: [frequencyId], references: [id])
}
model MemoryMarque {
  id           String   @id @default(uuid())
  name         String
  memoryboards Memory[]
}
model MemoryNumber {
  id           String   @id @default(uuid())
  number       Int
  memoryboards Memory[]
}
model MemoryType {
  id           String   @id @default(uuid())
  name         String
  memoryboards Memory[]
}
model MemoryFrequency {
  id           String   @id @default(uuid())
  name         String
  memoryboards Memory[]
}


model Powersupply {
  id                String            @id @default(uuid())

  products           Product[] @relation("ProductToPowersupply")
  modularity        Boolean
  certification80ID String
  certification80   PowersupplyMarque @relation(fields: [certification80ID], references: [id])

  powersupplyMarqueID String
  Marque              Certification80 @relation(fields: [powersupplyMarqueID], references: [id])
}
model PowersupplyMarque {
  id   String @id @default(uuid())
  name String

  powersupplies Powersupply[]
}
model Certification80 {
  id   String @id @default(uuid())
  name String

  powersupplies Powersupply[]
}


model Gpu {
  id                String          @id @default(uuid())
  products           Product[] @relation("ProductToGPU")
  GpuBrandId        String
  gpuBrand          GpuBrand        @relation(fields: [GpuBrandId], references: [id])
  gpuArchBrandId    String
  gpuArchBrand      GpuArchBrand    @relation(fields: [gpuArchBrandId], references: [id])
  graphiccardNameId String
  graphiccardName   GraphiccardName @relation(fields: [graphiccardNameId], references: [id])
}
model GpuBrand {
  id           String @id @default(uuid())
  name         String
  motherboards Gpu[]
}
model GpuArchBrand {
  id           String @id @default(uuid())
  name         String
  motherboards Gpu[]
}
model GraphiccardName {
  id           String @id @default(uuid())
  name         String
  motherboards Gpu[]
}


model PCcase {
  id                         String                         @id @default(uuid())
  product                    Product[] @relation("ProductToPCCase")
  brandId                    String
  brand                      PCcaseBrand                    @relation(fields: [brandId], references: [id])
  caseformatiD               String
  caseformat                 PCcaseCaseformat               @relation(fields: [caseformatiD], references: [id])
  numberofFansPreinstalledId String
  numberofFansPreinstalled   PCcaseNumberofFansPreinstalled @relation(fields: [numberofFansPreinstalledId], references: [id])
  rGBTypeId                  String
  rGBType                    PCcaseRGBType                  @relation(fields: [rGBTypeId], references: [id])
}
model PCcaseBrand {
  id     String   @id @default(uuid())
  name   String
  pccase PCcase[]
}
model PCcaseCaseformat {
  id     String   @id @default(uuid())
  name   String
  pccase PCcase[]
}
model PCcaseNumberofFansPreinstalled {
  id     String   @id @default(uuid())
  name   String
  pccase PCcase[]
}
model PCcaseRGBType {
  id     String   @id @default(uuid())
  name   String
  pccase PCcase[]
}


model Harddisk {
  id                  String                    @id @default(uuid())
  product             Product[]  @relation("ProductToStorage")
  brandId             String
  brand               HarddiskBrand             @relation(fields: [brandId], references: [id])
  typeId              String
  type                HarddiskType              @relation(fields: [typeId], references: [id])
  capacityId          String
  capacity            HarddiskCapacity          @relation(fields: [capacityId], references: [id])
  ComputerinterfaceId String
  Computerinterface   HarddiskComputerinterface @relation(fields: [ComputerinterfaceId], references: [id])
  DiscFormatId        String
  DiscFormat          HarddiskDiscFormat        @relation(fields: [DiscFormatId], references: [id])
}

model HarddiskBrand {
  id       String     @id @default(uuid())
  name     String
  harddisk Harddisk[]
}

model HarddiskType {
  id       String     @id @default(uuid())
  name     String
  harddisk Harddisk[]
}

model HarddiskCapacity {
  id       String     @id @default(uuid())
  name     String
  harddisk Harddisk[]
}

model HarddiskComputerinterface {
  id       String     @id @default(uuid())
  name     String
  harddisk Harddisk[]
}

model HarddiskDiscFormat {
  id       String     @id @default(uuid())
  name     String
  harddisk Harddisk[]
}
model Slide {
  id         String     @id @default(uuid())
  title         String
  description      String
  imageUrl   String
  url        String
  discount   Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}