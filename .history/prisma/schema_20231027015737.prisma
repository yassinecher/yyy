generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define shared fields, such as 'id' and timestamps, as attributes to avoid duplication.
model Base {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model User {
  email     String   @unique
  username  String   @unique
  password  String
  role      String   @default("user")

  @@map(name: "users")
}

model Billboard {
  id         String     @id @default(uuid())
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map(name: "billboards")
}


model Category {
  id          String    @id @default(uuid())
  name        String
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@map(name: "categories")
}
model Product {
  id            String       @id @default(uuid())
  name          String
  price         Decimal
  isFeatured    Boolean      @default(false)
  isArchived    Boolean      @default(false)
  template      String       @default("")
  useTemplate   Boolean      @default(false)
  motherboard   Motherboard?
  processor     Processor?
  powersupply   Powersupply?
  memory        Memory?
  gpu           Gpu?
  pccase        PCcase?
  harddisk      Harddisk?
  categoryId    String
  category      Category     @relation("CategoryToProduct", fields: [categoryId], references: [id])
  images        Image[]
  orderItems    OrderItem[]

  @@map(name: "products")
}



model Order {
  id       String  @id @default(uuid())
  isPaid   Boolean @default(false)
  phone    String  @default("")
  address  String  @default("")
  orderItems OrderItem[]

  @@map(name: "orders")
}


model OrderItem {
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map(name: "order_items")
}


model Image {
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map(name: "images")
}

model Motherboard {
  product        Product[] @relation("motherboardToProduct")
  manufacturerId String
  manufacturer   Manufacturer @relation("ManufacturerToMotherboard", fields: [manufacturerId], references: [id])
  ramslotsId     String
  ramslots       RamSlots @relation(fields: [ramslotsId], references: [id])
  chipsetId      String
  chipset        MotherboardChipset @relation(fields: [chipsetId], references: [id])
  cpusupportId   String
  cpusupport     CPUSupport @relation(fields: [cpusupportId], references: [id])
  formatId       String
  format         MotherboardFormat @relation(fields: [formatId], references: [id])

  @@map(name: "motherboards")
}

// Define other related entities in a similar manner.
// (Memory, Powersupply, Gpu, PCcase, Harddisk, etc.)

model Manufacturer {
  name     String
  imageUrl String
  motherboards Motherboard[] @relation("ManufacturerToMotherboard")

  @@map(name: "manufacturers")
}



// Define other entities like Processor, Memory, Powersupply, Gpu, PCcase, and Harddisk in a similar manner.

model RamSlots {
  id           String        @id @default(uuid())
  number       Int
  motherboards Motherboard[]
}
model MotherboardChipset {
  id           String        @id @default(uuid())
  name         String

  motherboards Motherboard[]
}
model CPUSupport {
  id           String        @id @default(uuid())
  name         String
  motherboards Motherboard[]
  processor Processor[]
}
model Guarantee {
  id           String        @id @default(uuid())
  name         String

}
model MotherboardFormat {
  id           String        @id @default(uuid())
  name         String
  motherboards Motherboard[]
}

model Processor {
  processorModelId  String
  processorModel    ProcessorModel @relation(fields: [processorModelId], references: [id])
  CPUSupportId      String
  CPUSupport        CPUSupport @relation(fields: [CPUSupportId], references: [id])

  @@map(name: "processors")
}

model ProcessorModel {
  name       String
  processors Processor[]

  @@map(name: "processor_models")
}



model Memory {
  rgb          Boolean
  marqueId     String
  numberId     String
  typeId       String
  frequencyId  String
  marque       MemoryMarque @relation(fields: [marqueId], references: [id])
  number       MemoryNumber @relation(fields: [numberId], references: [id])
  type         MemoryType @relation(fields: [typeId], references: [id])
  frequency    MemoryFrequency @relation(fields: [frequencyId], references: [id])

  @@map(name: "memories")
}

model MemoryMarque {
  name         String
  memories     Memory[]

  @@map(name: "memory_marques")
}

model MemoryNumber {
  number       Int
  memories     Memory[]

  @@map(name: "memory_numbers")
}

model MemoryType {
  name         String
  memories     Memory[]

  @@map(name: "memory_types")
}

model MemoryFrequency {
  name         String
  memories     Memory[]

  @@map(name: "memory_frequencies")
}

model Powersupply {
  modularity            Boolean
  certification80ID     String
  certification80       PowersupplyMarque @relation(fields: [certification80ID], references: [id])
  powersupplyMarqueID   String
  Marque                Certification80 @relation(fields: [powersupplyMarqueID], references: [id])

  @@map(name: "powersupplies")
}

model PowersupplyMarque {
  name       String
  powersupplies Powersupply[]

  @@map(name: "powersupply_marques")
}

model Certification80 {
  name       String
  powersupplies Powersupply[]

  @@map(name: "certification_80s")
}

model Gpu {
  GpuBrandId        String
  gpuBrand          GpuBrand @relation(fields: [GpuBrandId], references: [id])
  gpuArchBrandId    String
  gpuArchBrand      GpuArchBrand @relation(fields: [gpuArchBrandId], references: [id])
  graphiccardNameId String
  graphiccardName   GraphiccardName @relation(fields: [graphiccardNameId], references: [id])

  @@map(name: "gpus")
}

model GpuBrand {
  name         String
  motherboards Gpu[]

  @@map(name: "gpu_brands")
}

model GpuArchBrand {
  name         String
  motherboards Gpu[]

  @@map(name: "gpu_arch_brands")
}

model GraphiccardName {
  name         String
  motherboards Gpu[]

  @@map(name: "graphiccard_names")
}

model PCcase {
  brandId                    String
  caseformatiD               String
  numberofFansPreinstalledId String
  rGBTypeId                  String
  brand                      PCcaseBrand                    @relation(fields: [brandId], references: [id])
  caseformat                 PCcaseCaseformat               @relation(fields: [caseformatiD], references: [id])
  numberofFansPreinstalled   PCcaseNumberofFansPreinstalled @relation(fields: [numberofFansPreinstalledId], references: [id])
  rGBType                    PCcaseRGBType                  @relation(fields: [rGBTypeId], references: [id])

  @@map(name: "pccases")
}

model PCcaseBrand {
  name   String
  pccase PCcase[]

  @@map(name: "pccase_brands")
}

model PCcaseCaseformat {
  name   String
  pccase PCcase[]

  @@map(name: "pccase_case_formats")
}

model PCcaseNumberofFansPreinstalled {
  name   String
  pccase PCcase[]

  @@map(name: "pccase_fans_preinstalled")
}

model PCcaseRGBType {
  name   String
  pccase PCcase[]

  @@map(name: "pccase_rgb_types")
}

model Harddisk {
  brandId             String
  typeId              String
  capacityId          String
  ComputerinterfaceId String
  DiscFormatId        String
  brand               HarddiskBrand             @relation(fields: [brandId], references: [id])
  type                HarddiskType              @relation(fields: [typeId], references: [id])
  capacity            HarddiskCapacity          @relation(fields: [capacityId], references: [id])
  Computerinterface   HarddiskComputerinterface @relation(fields: [ComputerinterfaceId], references: [id])
  DiscFormat          HarddiskDiscFormat        @relation(fields: [DiscFormatId], references: [id])

  @@map(name: "harddisks")
}

model HarddiskBrand {
  name     String
  harddisk Harddisk[]

  @@map(name: "harddisk_brands")
}

model HarddiskType {
  name     String
  harddisk Harddisk[]

  @@map(name: "harddisk_types")
}

model HarddiskCapacity {
  name     String
  harddisk Harddisk[]

  @@map(name: "harddisk_capacities")
}

model HarddiskComputerinterface {
  name     String
  harddisk Harddisk[]

  @@map(name: "harddisk_computer_interfaces")
}

model HarddiskDiscFormat {
  name     String
  harddisk Harddisk[]

  @@map(name: "harddisk_disc_formats")
}
